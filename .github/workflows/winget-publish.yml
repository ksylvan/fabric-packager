name: Publish Fabric to WinGet on Release

on:
  # Triggered via repository_dispatch from upstream
  repository_dispatch:
    types: [fabric-winget-release]

  # Manual trigger as backup
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v1.4.302)"
        required: true
        type: string
      url:
        description: "Release URL (optional)"
        required: false
        type: string

jobs:
  publish-to-winget:
    runs-on: ubuntu-latest

    steps:
      - name: Extract release information
        id: release_info
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
            echo "url=${{ github.event.client_payload.url }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
            echo "url=${{ github.event.inputs.url }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Get Windows assets from release
        id: assets
        run: |
          tag="${{ steps.release_info.outputs.tag }}"
          version=$(echo "$tag" | sed 's/^v//')

          echo "Publishing version: $version"
          echo "Using tag: $tag"

          # Get release info from danielmiessler/fabric
          release_info=$(curl -s "https://api.github.com/repos/danielmiessler/fabric/releases/tags/$tag")

          # Extract Windows asset URLs by architecture for better detection
          arm64_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("_Windows_arm64\\.(zip|exe|msi|msix|appx)$")) | .browser_download_url')
          x64_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("_Windows_x86_64\\.(zip|exe|msi|msix|appx)$")) | .browser_download_url')
          i386_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("_Windows_i386\\.(zip|exe|msi|msix|appx)$")) | .browser_download_url')

          # Count available architectures
          arch_count=0
          all_urls=""
          if [ -n "$arm64_url" ]; then
            all_urls="$all_urls $arm64_url"
            arch_count=$((arch_count + 1))
            echo "Found ARM64 Windows asset: $arm64_url"
          fi
          if [ -n "$x64_url" ]; then
            all_urls="$all_urls $x64_url"
            arch_count=$((arch_count + 1))
            echo "Found x64 Windows asset: $x64_url"
          fi
          if [ -n "$i386_url" ]; then
            all_urls="$all_urls $i386_url"
            arch_count=$((arch_count + 1))
            echo "Found i386 Windows asset: $i386_url"
          fi

          if [ $arch_count -eq 0 ]; then
            echo "No Windows installer assets found for $tag, skipping..."
            exit 0
          fi

          echo "Found $arch_count Windows architectures"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "arm64_url=$arm64_url" >> $GITHUB_OUTPUT
          echo "x64_url=$x64_url" >> $GITHUB_OUTPUT
          echo "i386_url=$i386_url" >> $GITHUB_OUTPUT
          echo "urls=$(echo $all_urls | xargs)" >> $GITHUB_OUTPUT

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Update WinGet manifest with all architectures
        uses: michidk/run-komac@v2
        with:
          args: "update danielmiessler.Fabric --version ${{ steps.assets.outputs.version }} --urls ${{ steps.assets.outputs.urls }} --submit"
        env:
          GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}

      - name: Fix WinGet manifest for multi-architecture support
        run: |
          # Run the fix script (komac already installed by previous step)
          ./scripts/fix-manifest.sh "${{ steps.release_info.outputs.tag }}"
        env:
          GH_TOKEN: ${{ secrets.WINGET_TOKEN }}
