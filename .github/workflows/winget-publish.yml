name: Publish Fabric to WinGet on Release

on:
  # Triggered via repository_dispatch from upstream
  repository_dispatch:
    types: [fabric-release]

  # Manual trigger as backup
  workflow_dispatch:
    inputs:
      tag:
        description: "Release tag (e.g., v1.4.302)"
        required: true
        type: string
      url:
        description: "Release URL (optional)"
        required: false
        type: string

jobs:
  publish-to-winget:
    runs-on: windows-2025

    steps:
      - name: Extract release information
        id: release_info
        run: |
          if [ "${{ github.event_name }}" == "repository_dispatch" ]; then
            echo "tag=${{ github.event.client_payload.tag }}" >> $GITHUB_OUTPUT
            echo "url=${{ github.event.client_payload.url }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
            echo "url=${{ github.event.inputs.url }}" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Checkout winget-pkgs fork
        uses: actions/checkout@v4
        with:
          repository: ksylvan/winget-pkgs
          token: ${{ secrets.WINGET_TOKEN }}
          path: winget-pkgs

      - name: Install Komac
        run: |
          # Install Komac using WinGet (official recommended method)
          Write-Host "Installing Komac via WinGet..."
          winget install komac --accept-source-agreements --accept-package-agreements

          # Verify installation
          Write-Host "Verifying Komac installation..."
          komac --version
        shell: pwsh

      - name: Publish to WinGet
        run: |
          $tag = "${{ steps.release_info.outputs.tag }}"
          $version = $tag -replace '^v', ''

          Write-Host "Publishing version: $version"
          Write-Host "Using tag: $tag"

          # Get release info from danielmiessler/fabric
          $releaseInfo = Invoke-RestMethod -Uri "https://api.github.com/repos/danielmiessler/fabric/releases/tags/$tag"
          $windowsAssets = $releaseInfo.assets | Where-Object { $_.name -match '\.(exe|msi|msix|appx)$' }

          if ($windowsAssets.Count -eq 0) {
            Write-Host "No Windows installer assets found for $tag, skipping..."
            exit 0
          }

          $urls = ($windowsAssets | ForEach-Object { $_.browser_download_url }) -join ' '
          Write-Host "Found Windows assets: $urls"

          # Change to winget-pkgs directory
          Set-Location winget-pkgs

          # Update manifest using Komac
          Write-Host "Running Komac update command..."
          komac update --identifier danielmiessler.Fabric --version $version --urls $urls --submit

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Komac update failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}
