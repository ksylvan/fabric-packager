name: Monitor and Publish Fabric Releases to WinGet

on:
  schedule:
    # Check every 6 hours for new releases
    - cron: "0 */6 * * *"

  workflow_dispatch:
    inputs:
      version:
        description: "Specific version to publish (e.g., v1.4.302)"
        required: false
        type: string

jobs:
  check-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check latest Fabric release
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: 'danielmiessler',
              repo: 'fabric'
            });

            console.log(`Latest release: ${release.tag_name}`);
            core.setOutput('tag', release.tag_name);
            core.setOutput('url', release.html_url);
            return release.tag_name;

      - name: Get Windows assets from release
        id: assets
        run: |
          tag="${{ github.event.inputs.version || steps.check_release.outputs.tag }}"
          version=$(echo "$tag" | sed 's/^v//')

          echo "Publishing version: $version"
          echo "Using tag: $tag"

          # Get release info from danielmiessler/fabric
          release_info=$(curl -s "https://api.github.com/repos/danielmiessler/fabric/releases/tags/$tag")

          # Extract Windows asset URLs (support both direct executables and archives)
          urls=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("(_Windows_.*\\.(zip|tar\\.gz)$|\\.(exe|msi|msix|appx)$)")) | .browser_download_url' | tr '\n' ' ')

          if [ -z "$urls" ]; then
            echo "No Windows installer assets found for $tag, skipping..."
            exit 0
          fi

          echo "Found Windows assets: $urls"
          echo "version=$version" >> $GITHUB_OUTPUT
          echo "urls=$urls" >> $GITHUB_OUTPUT

      - name: Update WinGet manifest
        uses: michidk/run-komac@v2
        with:
          args: "update danielmiessler.Fabric --version ${{ steps.assets.outputs.version }} --urls ${{ steps.assets.outputs.urls }} --submit"
        env:
          GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}
