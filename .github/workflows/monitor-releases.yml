name: Monitor and Publish Fabric Releases

on:
  schedule:
    # Check every 3 hours for new releases
    - cron: "13 */3 * * *"

  workflow_dispatch:
    inputs:
      version:
        description: "Specific version to publish (e.g., v1.4.302)"
        required: false
        type: string

jobs:
  check-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check latest Fabric release
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: 'danielmiessler',
              repo: 'fabric'
            });

            console.log(`Latest release: ${release.tag_name}`);
            core.setOutput('tag', release.tag_name);
            core.setOutput('url', release.html_url);
            return release.tag_name;

      - name: Get Windows assets from release
        id: assets
        run: |
          tag="${{ github.event.inputs.version || steps.check_release.outputs.tag }}"
          version=$(echo "$tag" | sed 's/^v//')

          echo "Publishing version: $version"
          echo "Using tag: $tag"

          # Get release info from danielmiessler/fabric
          release_info=$(curl -s "https://api.github.com/repos/danielmiessler/fabric/releases/tags/$tag")

          # Extract Windows asset URLs by architecture for better detection
          arm64_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("_Windows_arm64\\.(zip|exe|msi|msix|appx)$")) | .browser_download_url')
          x64_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("_Windows_x86_64\\.(zip|exe|msi|msix|appx)$")) | .browser_download_url')
          i386_url=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("_Windows_i386\\.(zip|exe|msi|msix|appx)$")) | .browser_download_url')

          # Count available architectures
          arch_count=0
          all_urls=""
          if [ -n "$arm64_url" ]; then
            all_urls="$all_urls $arm64_url"
            arch_count=$((arch_count + 1))
            echo "Found ARM64 Windows asset: $arm64_url"
          fi
          if [ -n "$x64_url" ]; then
            all_urls="$all_urls $x64_url"
            arch_count=$((arch_count + 1))
            echo "Found x64 Windows asset: $x64_url"
          fi
          if [ -n "$i386_url" ]; then
            all_urls="$all_urls $i386_url"
            arch_count=$((arch_count + 1))
            echo "Found i386 Windows asset: $i386_url"
          fi

          if [ $arch_count -eq 0 ]; then
            echo "No Windows installer assets found for $tag, skipping WinGet..."
            echo "winget_skip=true" >> $GITHUB_OUTPUT
          else
            echo "Found $arch_count Windows architectures"
            echo "winget_skip=false" >> $GITHUB_OUTPUT
          fi

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "arm64_url=$arm64_url" >> $GITHUB_OUTPUT
          echo "x64_url=$x64_url" >> $GITHUB_OUTPUT
          echo "i386_url=$i386_url" >> $GITHUB_OUTPUT
          echo "urls=$(echo $all_urls | xargs)" >> $GITHUB_OUTPUT

      - name: Checkout repository
        if: steps.assets.outputs.winget_skip != 'true'
        uses: actions/checkout@v4

      - name: Check if WinGet PR already exists for this version
        if: steps.assets.outputs.winget_skip != 'true'
        id: winget_pr_check
        run: |
          version="${{ steps.assets.outputs.version }}"
          echo "🔍 Checking for existing merged WinGet PR for version $version..."

          # Search for merged PRs with the version in title/body
          pr_search=$(gh search prs \
            --repo microsoft/winget-pkgs \
            --state merged \
            --limit 10 \
            --json number,title,createdAt,mergedAt \
            "danielmiessler.Fabric $version" || echo "[]")

          # Check if any results found
          pr_count=$(echo "$pr_search" | jq '. | length')

          if [ "$pr_count" -gt 0 ]; then
            echo "✅ Found $pr_count existing merged PR(s) for danielmiessler.Fabric $version"
            echo "$pr_search" | jq -r '.[] | "- PR #\(.number): \(.title) (merged: \(.mergedAt))"'
            echo "winget_pr_exists=true" >> $GITHUB_OUTPUT
          else
            echo "🚀 No existing merged PR found for danielmiessler.Fabric $version, proceeding..."
            echo "winget_pr_exists=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.WINGET_TOKEN }}

      - name: Update WinGet manifest with all architectures
        if: steps.assets.outputs.winget_skip != 'true' && steps.winget_pr_check.outputs.winget_pr_exists != 'true'
        uses: michidk/run-komac@v2
        with:
          args: "update danielmiessler.Fabric --version ${{ steps.assets.outputs.version }} --urls ${{ steps.assets.outputs.urls }} --submit"
        env:
          GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}

      - name: Fix WinGet manifest for multi-architecture support
        if: steps.assets.outputs.winget_skip != 'true' && steps.winget_pr_check.outputs.winget_pr_exists != 'true'
        run: |
          # Run the fix script (komac already installed by previous step)
          ./scripts/fix-manifest.sh "${{ github.event.inputs.version || steps.check_release.outputs.tag }}"
        env:
          GH_TOKEN: ${{ secrets.WINGET_TOKEN }}

      - name: Check if Docker images already exist
        id: docker_check
        run: |
          tag="${{ github.event.inputs.version || steps.check_release.outputs.tag }}"
          owner="${GITHUB_REPOSITORY_OWNER,,}"

          # Check if we already published this tag to avoid rebuilding
          echo "🔍 Checking if tag $tag exists in registries..."

          # Check GHCR using docker manifest inspect
          echo "Checking GHCR..."
          ghcr_image="ghcr.io/${owner}/fabric:$tag"
          echo "Image: $ghcr_image"
          if docker manifest inspect "$ghcr_image" > /dev/null 2>&1; then
            ghcr_exists="true"
            echo "✅ GHCR: EXISTS"
          else
            ghcr_exists="false"
            echo "❌ GHCR: MISSING"
          fi

          # Check Docker Hub using docker manifest inspect
          echo "Checking Docker Hub..."
          dh_user="${{ vars.DOCKERHUB_USERNAME }}"
          dh_image="docker.io/${dh_user}/fabric:$tag"
          echo "Image: $dh_image"
          if docker manifest inspect "$dh_image" > /dev/null 2>&1; then
            dh_exists="true"
            echo "✅ Docker Hub: EXISTS"
          else
            dh_exists="false"
            echo "❌ Docker Hub: MISSING"
          fi

          echo "GHCR exists: $ghcr_exists, Docker Hub exists: $dh_exists"

          # Decision logic using docker manifest results
          if [ "$ghcr_exists" = "true" ] && [ "$dh_exists" = "true" ]; then
            echo "✅ Tag $tag exists in both registries, skipping build entirely!"
            echo "docker_skip=true" >> $GITHUB_OUTPUT
          elif [ "$ghcr_exists" = "true" ] || [ "$dh_exists" = "true" ]; then
            echo "⚠️ Tag $tag exists in one registry but not both, proceeding with build..."
            echo "  - GHCR: $([ "$ghcr_exists" = "true" ] && echo "EXISTS" || echo "missing")"
            echo "  - Docker Hub: $([ "$dh_exists" = "true" ] && echo "EXISTS" || echo "missing")"
            echo "docker_skip=false" >> $GITHUB_OUTPUT
          else
            echo "🚀 Tag $tag does not exist in either registry, proceeding with build..."
            echo "docker_skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Docker Publishing
        if: steps.docker_check.outputs.docker_skip != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = "${{ github.event.inputs.version || steps.check_release.outputs.tag }}";
            const url = "${{ steps.check_release.outputs.url }}";

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker-publish.yml',
              ref: 'main',
              inputs: {
                tag: tag,
                url: url
              }
            });

            console.log(`Triggered Docker publishing for ${tag}`);
