name: Monitor and Publish Fabric Releases to WinGet

on:
  schedule:
    # Check every 6 hours for new releases
    - cron: "0 */6 * * *"

  workflow_dispatch:
    inputs:
      version:
        description: "Specific version to publish (e.g., v1.4.302)"
        required: false
        type: string

jobs:
  check-and-publish:
    runs-on: windows-2025

    steps:
      - name: Check latest Fabric release
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: 'danielmiessler',
              repo: 'fabric'
            });

            console.log(`Latest release: ${release.tag_name}`);
            core.setOutput('tag', release.tag_name);
            core.setOutput('url', release.html_url);
            return release.tag_name;

      - name: Checkout winget-pkgs fork
        uses: actions/checkout@v4
        with:
          repository: ksylvan/winget-pkgs
          token: ${{ secrets.WINGET_TOKEN }}
          path: winget-pkgs

      - name: Install Komac
        run: |
          # Install Komac using WinGet (official recommended method)
          Write-Host "Installing Komac via WinGet..."
          winget install komac --accept-source-agreements --accept-package-agreements

          # Verify installation
          Write-Host "Verifying Komac installation..."
          komac --version
        shell: pwsh

      - name: Publish to WinGet
        run: |
          $tag = "${{ github.event.inputs.version || steps.check_release.outputs.tag }}"
          $version = $tag -replace '^v', ''

          Write-Host "Publishing version: $version"
          Write-Host "Using tag: $tag"

          # Get release info from danielmiessler/fabric
          $releaseInfo = Invoke-RestMethod -Uri "https://api.github.com/repos/danielmiessler/fabric/releases/tags/$tag"
          $windowsAssets = $releaseInfo.assets | Where-Object { $_.name -match '\.(exe|msi|msix|appx)$' }

          if ($windowsAssets.Count -eq 0) {
            Write-Host "No Windows installer assets found for $tag, skipping..."
            exit 0
          }

          $urls = ($windowsAssets | ForEach-Object { $_.browser_download_url }) -join ' '
          Write-Host "Found Windows assets: $urls"

          # Change to winget-pkgs directory
          Set-Location winget-pkgs

          # Update manifest using Komac
          Write-Host "Running Komac update command..."
          komac update --identifier danielmiessler.Fabric --version $version --urls $urls --submit

          if ($LASTEXITCODE -ne 0) {
            Write-Error "Komac update failed with exit code $LASTEXITCODE"
            exit $LASTEXITCODE
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}
