name: Monitor and Publish Fabric Releases

on:
  schedule:
    # Check every 3 hours for new releases
    - cron: "13 */3 * * *"

  workflow_dispatch:
    inputs:
      version:
        description: "Specific version to publish (e.g., v1.4.302)"
        required: false
        type: string

jobs:
  check-and-publish:
    runs-on: ubuntu-latest

    steps:
      - name: Check latest Fabric release
        id: check_release
        uses: actions/github-script@v7
        with:
          script: |
            const { data: release } = await github.rest.repos.getLatestRelease({
              owner: 'danielmiessler',
              repo: 'fabric'
            });

            console.log(`Latest release: ${release.tag_name}`);
            core.setOutput('tag', release.tag_name);
            core.setOutput('url', release.html_url);
            return release.tag_name;

      - name: Get Windows assets from release
        id: assets
        run: |
          tag="${{ github.event.inputs.version || steps.check_release.outputs.tag }}"
          version=$(echo "$tag" | sed 's/^v//')

          echo "Publishing version: $version"
          echo "Using tag: $tag"

          # Get release info from danielmiessler/fabric
          release_info=$(curl -s "https://api.github.com/repos/danielmiessler/fabric/releases/tags/$tag")

          # Extract Windows asset URLs (support both direct executables and archives)
          urls=$(echo "$release_info" | jq -r '.assets[] | select(.name | test("(_Windows_.*\\.(zip|tar\\.gz)$|\\.(exe|msi|msix|appx)$)")) | .browser_download_url' | tr '\n' ' ')

          if [ -z "$urls" ]; then
            echo "No Windows installer assets found for $tag, skipping WinGet..."
            echo "winget_skip=true" >> $GITHUB_OUTPUT
          else
            echo "Found Windows assets: $urls"
            echo "winget_skip=false" >> $GITHUB_OUTPUT
          fi

          echo "version=$version" >> $GITHUB_OUTPUT
          echo "urls=$urls" >> $GITHUB_OUTPUT

      - name: Update WinGet manifest
        if: steps.assets.outputs.winget_skip != 'true'
        uses: michidk/run-komac@v2
        with:
          args: "update danielmiessler.Fabric --version ${{ steps.assets.outputs.version }} --urls ${{ steps.assets.outputs.urls }} --submit"
        env:
          GITHUB_TOKEN: ${{ secrets.WINGET_TOKEN }}

      - name: Check if Docker images already exist
        id: docker_check
        run: |
          tag="${{ github.event.inputs.version || steps.check_release.outputs.tag }}"
          owner="${GITHUB_REPOSITORY_OWNER,,}"

          # Check if we already published this tag to avoid rebuilding
          # Check GHCR
          ghcr_exists=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://ghcr.io/v2/${owner}/fabric/manifests/$tag" || echo "404")

          # Check Docker Hub (use configured Docker Hub username)
          dh_user="${{ vars.DOCKERHUB_USERNAME }}"
          dh_exists=$(curl -s -o /dev/null -w "%{http_code}" \
            "https://hub.docker.com/v2/repositories/${dh_user,,}/fabric/tags/$tag" || echo "404")

          if [ "$ghcr_exists" = "200" ] && [ "$dh_exists" = "200" ]; then
            echo "Docker images for $tag already exist in both registries, skipping..."
            echo "docker_skip=true" >> $GITHUB_OUTPUT
          else
            echo "Docker images for $tag missing from at least one registry, proceeding..."
            echo "docker_skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Trigger Docker Publishing
        if: steps.docker_check.outputs.docker_skip != 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const tag = "${{ github.event.inputs.version || steps.check_release.outputs.tag }}";
            const url = "${{ steps.check_release.outputs.url }}";

            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'docker-publish.yml',
              ref: 'main',
              inputs: {
                tag: tag,
                url: url
              }
            });

            console.log(`Triggered Docker publishing for ${tag}`);
